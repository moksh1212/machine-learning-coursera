function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%

eye_matrix = eye(num_labels);
y_matrix = eye_matrix(y,:);

% Part 1
A1 = [ones(m,1) X];
A2 = sigmoid(Theta1*A1');
A2 = [ones(1,size(A2,2)); A2];
A3 = sigmoid((Theta2*A2)');

% Unregularized cost function
first_term = -1 * y_matrix .* log(A3);
second_term = (y_matrix - 1) .* log(1-A3);
J = sum(sum(first_term + second_term, 2), 1)/m;

% Regularized cost function
theta1SQ = Theta1(:,2:size(Theta1,2)) .^ 2;
theta2SQ = Theta2(:,2:size(Theta2,2)) .^ 2;
reg_term = (sum(sum(theta1SQ, 2), 1) + sum(sum(theta2SQ, 2), 1)) * (lambda/(2*m));
J = J + reg_term;

% Part 2
%Delta1 = zeros(size(Theta1, 1), size(Theta1, 2) - 1);
%Delta2 = zeros(size(Theta2, 1), size(Theta2, 2) - 1);

%Step 1 : Feed forward
a1 = X';
z2 = Theta1 * [ones(1,size(a1,2)) ; a1];
a2 = sigmoid(z2);
z3 = Theta2 * [ones(1, size(a2,2)) ; a2];
a3 = sigmoid(z3');
% Size now is m x num_classes_output_layer

%Step 2 : Output layer gradient
del3 = a3 - y_matrix;

%Step 3 : Hidden layer gradient
tmp_theta_prod = del3 * Theta2(:,2:end);
del2 = tmp_theta_prod .* sigmoidGradient(z2);
%size(del2)
%Removing the delta_0 bias term
%del2 = del2(2:end); 
	
%Step 4 : Calculate capital (triangular) Deltas
Delta2 = del3' * [ones(m,1) a2'];
Delta1 = del2' * a1';
%size(Delta2)
%size(Delta1)
%end

%Step  : Final gradient computation
D1 = Delta1 ./ m;
D2 = Delta2 ./ m;
Theta1_grad = [zeros(size(D1,1), 1) D1];
Theta2_grad = D2;
%size(D1)
%size(D2)


% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
